services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - spring
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - spring
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${KAFKA_HOST}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true

  msvc-eureka:
    build: ./service-eureka
    ports:
      - "8761:8761"
    environment:
      - EUREKA_HOST=msvc-eureka
    networks:
      - spring
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  msvc-notification:
    build: ./service-notification
    ports:
      - "8087:8087"
    environment:
      - EUREKA_HOST=msvc-eureka
      - KAFKA_HOST=${KAFKA_HOST}
      - NOTIFICATION_HOST=${NOTIFICATION_HOST}
    networks:
      - spring
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  msvc-gateway:
    build: ./service-gateway
    ports:
      - "8080:8080"
    environment:
      - EUREKA_HOST=msvc-eureka
      - GATEWAY_HOST=msvc-gateway
    networks:
      - spring
    depends_on:
      msvc-eureka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  msvc-user: #Name of the msvc from application.yml
    build: ./service-user  # Route of Dockerfile
    ports:
      - "8081:8081"         # host:container
    environment:
      - USER_MSVC_DB_URL=${DOCKER_USER_MSVC_DB_URL}
      - USER_MSVC_DB_USER=${USER_MSVC_DB_USER}
      - USER_MSVC_DB_PASS=${USER_MSVC_DB_PASS}
      - EUREKA_HOST=msvc-eureka
      - USER_HOST=msvc-user
    networks:
      - spring
    depends_on:
      msvc-eureka:
        condition: service_healthy
      msvc-user-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  msvc-user-db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${USER_MSVC_DB_PASS}
      MYSQL_DATABASE: padel_user_service_db
    networks:
      - spring
    ports:
      - "3307:3306"
    volumes:
      - mysql-user-db-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10

  msvc-padel-court: #Name of the msvc from application.yml
    build: ./service-padel-court  # Route of Dockerfile
    ports:
      - "8083:8083"         # host:container
    environment:
      - PADEL_COURT_MSVC_DB_URL=${DOCKER_PADEL_COURT_MSVC_DB_URL}
      - PADEL_COURT_MSVC_DB_USER=${PADEL_COURT_MSVC_DB_USER}
      - PADEL_COURT_MSVC_DB_PASS=${PADEL_COURT_MSVC_DB_PASS}
      - EUREKA_HOST=msvc-eureka
      - PADEL_COURT_HOST=msvc-padel-court
    networks:
      - spring
    depends_on:
      msvc-eureka:
        condition: service_healthy
      msvc-padel-court-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  msvc-padel-court-db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${PADEL_COURT_MSVC_DB_PASS}
      MYSQL_DATABASE: padel_padel_court_service_db
    networks:
      - spring
    ports:
      - "3308:3306"
    volumes:
      - mysql-padel-court-db-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10

  msvc-auth:
    build: ./service-auth
    ports:
      - "8086:8086"
    environment:
      - AUTH_MSVC_DB_URL=${DOCKER_AUTH_MSVC_DB_URL}
      - AUTH_MSVC_DB_USER=${AUTH_MSVC_DB_USER}
      - AUTH_MSVC_DB_PASS=${AUTH_MSVC_DB_PASS}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - EUREKA_HOST=msvc-eureka
      - AUTH_HOST=msvc-auth
    networks:
      - spring
    depends_on:
      msvc-eureka:
        condition: service_healthy
      msvc-auth-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  msvc-auth-db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${AUTH_MSVC_DB_PASS}
      MYSQL_DATABASE: padel_auth_service_db
    networks:
      - spring
    ports:
      - "3309:3306"
    volumes:
      - mysql-auth-db-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10

  msvc-padel-match:
    build: ./service-padel-match
    ports:
      - "8082:8082"
    environment:
      - PADEL_MATCH_MSVC_DB_URL=${DOCKER_PADEL_MATCH_MSVC_DB_URL}
      - PADEL_MATCH_MSVC_DB_USER=${PADEL_MATCH_MSVC_DB_USER}
      - PADEL_MATCH_MSVC_DB_PASS=${PADEL_MATCH_MSVC_DB_PASS}
      - EUREKA_HOST=msvc-eureka
      - PADEL_MATCH_HOST=msvc-padel-match
      - KAFKA_HOST=${KAFKA_HOST}
    networks:
      - spring
    depends_on:
      msvc-eureka:
        condition: service_healthy
      msvc-padel-match-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  msvc-padel-match-db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${PADEL_MATCH_MSVC_DB_PASS}
      MYSQL_DATABASE: padel_padel_match_service_db
    networks:
      - spring
    ports:
      - "3310:3306"
    volumes:
      - mysql-padel-match-db-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10

  msvc-match-user:
    build: ./service-match-user
    ports:
      - "8085:8085"
    environment:
      - MATCH_USER_MSVC_DB_URL=${DOCKER_MATCH_USER_MSVC_DB_URL}
      - MATCH_USER_MSVC_DB_USER=${MATCH_USER_MSVC_DB_USER}
      - MATCH_USER_MSVC_DB_PASS=${MATCH_USER_MSVC_DB_PASS}
      - EUREKA_HOST=msvc-eureka
      - MATCH_USER_HOST=msvc-match-user
    networks:
      - spring
    depends_on:
      msvc-eureka:
        condition: service_healthy
      msvc-match-user-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  msvc-match-user-db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MATCH_USER_MSVC_DB_PASS}
      MYSQL_DATABASE: padel_match_user_service_db
    networks:
      - spring
    ports:
      - "3311:3306"
    volumes:
      - mysql-match-user-db-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10


volumes:
  mysql-padel-court-db-data:
  mysql-user-db-data:
  mysql-auth-db-data:
  mysql-padel-match-db-data:
  mysql-match-user-db-data:

networks:
  spring:
    driver: bridge
